# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
- group: sectigo

steps:

- task: DownloadSecureFile@1
  displayName: Download certificate
  inputs:
    secureFile: 'sectigo2025.pfx'

- task: PowerShell@2
  displayName: import certificate
  inputs:
    targetType: 'inline'
    script: |
      $pfx = "$env:DOWNLOADSECUREFILE_SECUREFILEPATH"
      $pw = "$(CertPass2025)"
      $pfxpass = $pw | ConvertTo-SecureString -AsPlainText -Force
      Import-PfxCertificate -FilePath $pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pfxpass 

- task: VSBuild@1
  displayName: Build x86
  inputs:
    solution: '**/*.sln'
    platform: 'x86'
    configuration: 'Release'

- task: VSBuild@1
  displayName: Build x65
  inputs:
    solution: '**/*.sln'
    platform: 'x64'
    configuration: 'Release'

- task: PowerShell@2
  displayName: Sign setup
  inputs:
    targetType: 'inline'
    script: |
      $timestampUrl = "http://timestamp.digicert.com"
      Write-Host "TIMESTAMP " $timestampUrl
      $signtool = "C:\Program Files (x86)\Windows Kits\8.1\bin\x86\signtool.exe"
      if (!($signtool | Test-Path)) 
      {
        $signtool = "C:\Program Files (x86)\Windows Kits\10\App Certification Kit\signtool.exe"
        if (!($signtool | Test-Path)) 
        {
           throw "Cannot find SIGNTOOL"
        }
      }
      Write-Host "SIGNTOOL " $signtool
      ForEach ($file in (Get-ChildItem "ship\*.msi"))
      {
        Write-Host $file.FullName
        &$signtool sign /n "Nikolay Belykh" /v /fd sha256 /tr $timestampUrl /td sha256 /d "Visio TwoPoints Addin" /du "https://unmanagedvisio.com" /sha1 C1427D06DE2DF8B4E9878B7CC502094D3C9D2E03 $file.FullName 
      }

- task: CopyFiles@2
  displayName: 'Copy to artifacts'
  inputs:
    Contents: ship/*.msi
    flattenFolders: true
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ship'

- publish: $(Build.ArtifactStagingDirectory)/ship
  displayName: 'Publish artifacts'
  artifact: ship
